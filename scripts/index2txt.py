"""
Creazione di una pipeline in Pyserini per fare l'equivalente di quello che facevano loro per la submission al round 2
(BM25 sui topic del round 2 di TREC-EVAL usando la versione UDel) usando l'index full text che dia in output i top 500 hits.
"""

"""
# TODO
- index for lucene
- get queries from challange
- SimpleSearcher
# ISSUES
- not all paper have
- be sure the ids are the cord_id
# Get the data
!wget https://www.dropbox.com/s/j55t617yhvmegy8/lucene-index-covid-2020-04-10.tar.gz

!tar xvfz lucene-index-covid-2020-04-10.tar.gz

"""
# from https://github.com/gsarti/covid-papers-browser/blob/feature/TREC/trec/exploration.ipynb


import requests
import xmltodict
import json
import pprint
import pandas as pd
from pathlib import Path
from pyserini.search import pysearch
from tqdm.autonotebook import tqdm
from dataclasses import dataclass
@dataclass
class PreFetchingDocumentsWithLucene:
    collection_name: str
    searcher: pysearch.SimpleSearcher
    number_of_hits: int = 1000
    tag: str = 'covid'

    def __post_init__(self):
        self.topics = pysearch.get_topics(self.collection_name)

    def __call__(self):
        self.query_hits = {}
        for topicid in tqdm(self.topics):
            query = self.topics[topicid]['query']
            # id in our case is just the number of the topics in order
            self.query_hits[topicid] = self.searcher.search(
                query, self.number_of_hits)
        # sort dict by topicid
        self.query_hits = { k: v for k, v in sorted(
            self.query_hits.items(), key=lambda x: x[0])}

        print(f'Queries completed')

    def to_txt(self, out_path):
        with open(out_path, 'w') as runfile:
            for topicid, hits in self.query_hits.items():
                for i in range(0, len(hits)):
                    # submission format topicid Q0 docid rank score run-tag
                    _ = runfile.write('{} Q0 {} {} {:.6f} {}\n'.format(
                        topicid, hits[i].docid, i+1, hits[i].score, self.tag))

        print(f'Result stored at {out_path}')


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(
        description='Create the ranking using lucene and bm25')

    parser.add_argument('--index',
                        type=str, required=True,
                        help='Path to the index files generated by lucene.')
    parser.add_argument(
        '--collection',
        type=str,
        default='covid_round3_udel',
        help='Name of the collection name, see https://github.com/castorini/pyserini/blob/master/pyserini/search/pysearch.py#L272')

    parser.add_argument('--out', type=str, default=None,
                        help='Dir for the generated .txt file. By default the result will be stored using the same name as the <OUT>/<INDEX_NAME-mb25>')
    parser.add_argument('--hits', type=int, default=1000,
                        help='Number of results returned by lucene for each topic')
    parser.add_argument('--tag', type=str, default='test',
                        help='A tag for this run')

    args = parser.parse_args()
    print(f'Using index at {args.index} with topic {args.collection}')
    out_filepath = Path(args.out) / Path(args.index).stem
    out_filepath = str(out_filepath) + '-bm25.txt'

    searcher = pysearch.SimpleSearcher(args.index)
    pip = PreFetchingDocumentsWithLucene(
        args.collection, searcher, number_of_hits=args.hits, tag=args.tag)
    pip.searcher.set_bm25(0.9, 0.4)  # we should open an issue
    pip()
    pip.to_txt(out_path=out_filepath)
